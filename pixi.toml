[project]
name = "pixi-build"
version = "0.1.0"
description = "Binary for building pixi projects into packages"
authors = ["Tim de Jager <tim@prefix.dev>"]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["osx-arm64", "win-64", "linux-64", "osx-64"]

[tasks]
run = "cargo run"
run-release = "cargo run --release"
build = "cargo build"
build-release = "cargo build --release"
nextest = "cargo nextest run --workspace --all-targets"
doctest = "cargo test --doc"
test = [{ task = "nextest" }, { task = "doctest" }]
generate-matrix = "python scripts/generate-matrix.py"


install-pixi-build-python = { cmd = "cargo install --path crates/pixi-build-python --locked --force" }
install-pixi-build-cmake = { cmd = "cargo install --path crates/pixi-build-cmake  --locked --force" }
install-pixi-build-rattler-build = { cmd = "cargo install --path crates/pixi-build-rattler-build --locked --force" }
install-pixi-build-rust = { cmd = "cargo install --path crates/pixi-build-rust --locked --force" }
install-pixi-backends = { depends-on = [
  "install-pixi-build-python",
  "install-pixi-build-cmake",
  "install-pixi-build-rattler-build",
  "install-pixi-build-rust",
] }


[dependencies]
rust = ">=1.86.0,<1.87"
python = ">=3.12.4,<4"
openssl = ">=3.5.0,<4"
compilers = "1.11.0.*"
pkg-config = ">=0.29.2,<0.30"
libzlib = ">=1.3.1,<2"
liblzma = ">=5.8.1,<6"
cargo-nextest = ">=0.9.96,<0.10"

[activation]
env.CARGO_TARGET_DIR = "target/pixi"


[target.linux-64.dependencies]
clang = ">=20.1.5,<20.2"
mold = ">=2.33.0,<3.0"
patchelf = "==0.18.0"

[target.linux-64.activation]
scripts = ["scripts/activate.sh"]

[feature.schema.dependencies]
pydantic = ">=2.8.2,<3"
ruff = ">=0.12.5,<0.13"

[feature.build.dependencies]
rattler-build = ">=0.30.0,<1"

[feature.build.tasks.build-recipe-ci]
cmd = "rattler-build build --test native --channel https://prefix.dev/pixi-build-backends --channel https://prefix.dev/conda-forge --output-dir={{ output_dir }} --recipe {{ recipe }} --target-platform {{ target_platform }}"
args = ["output_dir", "recipe", "target_platform"]

[feature.build.tasks.build-recipe]
depends-on = [
  { task = "build-recipe-ci", args = [
    "./output",
    "{{ recipe }}",
    "{{ target_platform }}",
  ] },
]
args = ["recipe", "target_platform"]


[feature.schema.tasks]
generate-schema = "python schema/model.py > schema/schema.json"
fmt-schema = "ruff format schema"
lint-schema = "ruff check schema --fix"

[feature.lint.dependencies]
actionlint = ">=1.7.4,<2"
shellcheck = ">=0.10.0,<0.11"
taplo = ">=0.10,<0.11"
typos = ">=1.23.1,<2"
dprint = ">=0.50.0,<0.51"
lefthook = ">=1.12.2,<2"

[feature.lint.tasks]
actionlint = { cmd = "actionlint", env = { SHELLCHECK_OPTS = "-e SC2086" } }
cargo-clippy = "cargo clippy --all-targets --workspace -- -D warnings"
cargo-fmt = "cargo fmt --all"
dprint-check = { cmd = "dprint check --log-level=silent", description = "Check formatting with dprint" }
dprint-fmt = { cmd = "dprint fmt --incremental=false", description = "Format with dprint" }
lefthook = { cmd = "lefthook", description = "Run lefthook" }
lint = { depends-on = [
  "lint-fast",
  "lint-slow",
], description = "Run all linters and formatters on all code" }
lint-fast = { cmd = "lefthook run pre-commit --all-files --force", description = "Run all fast linters and formatters on all code (no clippy)" }
lint-slow = { cmd = "lefthook run pre-push --all-files --force", description = "Run all slow linters and formatters on all code" }
pre-commit-install = "lefthook install"
pre-commit-install-minimal = "lefthook install pre-commit"
toml-format = { cmd = "taplo fmt", env = { RUST_LOG = "warn" } }
toml-lint = "taplo lint --verbose **/pixi.toml"

[feature.docs.dependencies]
cairosvg = "2.8.2.*"
mdx_truly_sane_lists = ">=1.3,<2"
mkdocs-material = ">=9.6.14,<10"
mkdocs-redirects = ">=1.2.1,<2"
pillow = ">=9.4.0"

[feature.docs.tasks]
build-docs = "mkdocs build --strict"
docs = { cmd = "mkdocs serve", description = "Serve the docs locally" }


[environments]
default = { solve-group = "default" }
lint = { features = ["lint"], solve-group = "default" }
docs = { features = ["docs"], no-default-feature = true }
schema = { features = ["schema"], no-default-feature = true }
build = { features = ["build"], no-default-feature = true }
